// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package kis

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opQueryPortLineInfos = "QueryPortLineInfos"

// QueryPortLineInfosRequest generates a "ksc/request.Request" representing the
// client's request for the QueryPortLineInfos operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See QueryPortLineInfos for more information on using the QueryPortLineInfos
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the QueryPortLineInfosRequest method.
//    req, resp := client.QueryPortLineInfosRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryPortLineInfos
func (c *Kis) QueryPortLineInfosRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryPortLineInfos,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryPortLineInfos API operation for kis.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kis's
// API operation QueryPortLineInfos for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryPortLineInfos
func (c *Kis) QueryPortLineInfos(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryPortLineInfosRequest(input)
	return out, req.Send()
}

// QueryPortLineInfosWithContext is the same as QueryPortLineInfos with the addition of
// the ability to pass a context and additional request options.
//
// See QueryPortLineInfos for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kis) QueryPortLineInfosWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryPortLineInfosRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryServerBatchIds = "QueryServerBatchIds"

// QueryServerBatchIdsRequest generates a "ksc/request.Request" representing the
// client's request for the QueryServerBatchIds operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See QueryServerBatchIds for more information on using the QueryServerBatchIds
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the QueryServerBatchIdsRequest method.
//    req, resp := client.QueryServerBatchIdsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryServerBatchIds
func (c *Kis) QueryServerBatchIdsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryServerBatchIds,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryServerBatchIds API operation for kis.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kis's
// API operation QueryServerBatchIds for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryServerBatchIds
func (c *Kis) QueryServerBatchIds(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryServerBatchIdsRequest(input)
	return out, req.Send()
}

// QueryServerBatchIdsWithContext is the same as QueryServerBatchIds with the addition of
// the ability to pass a context and additional request options.
//
// See QueryServerBatchIds for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kis) QueryServerBatchIdsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryServerBatchIdsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQueryServerOrderInfos = "QueryServerOrderInfos"

// QueryServerOrderInfosRequest generates a "ksc/request.Request" representing the
// client's request for the QueryServerOrderInfos operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See QueryServerOrderInfos for more information on using the QueryServerOrderInfos
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the QueryServerOrderInfosRequest method.
//    req, resp := client.QueryServerOrderInfosRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryServerOrderInfos
func (c *Kis) QueryServerOrderInfosRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQueryServerOrderInfos,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QueryServerOrderInfos API operation for kis.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kis's
// API operation QueryServerOrderInfos for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QueryServerOrderInfos
func (c *Kis) QueryServerOrderInfos(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QueryServerOrderInfosRequest(input)
	return out, req.Send()
}

// QueryServerOrderInfosWithContext is the same as QueryServerOrderInfos with the addition of
// the ability to pass a context and additional request options.
//
// See QueryServerOrderInfos for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kis) QueryServerOrderInfosWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QueryServerOrderInfosRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQuerySwitchBatchIds = "QuerySwitchBatchIds"

// QuerySwitchBatchIdsRequest generates a "ksc/request.Request" representing the
// client's request for the QuerySwitchBatchIds operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See QuerySwitchBatchIds for more information on using the QuerySwitchBatchIds
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the QuerySwitchBatchIdsRequest method.
//    req, resp := client.QuerySwitchBatchIdsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QuerySwitchBatchIds
func (c *Kis) QuerySwitchBatchIdsRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQuerySwitchBatchIds,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QuerySwitchBatchIds API operation for kis.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kis's
// API operation QuerySwitchBatchIds for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QuerySwitchBatchIds
func (c *Kis) QuerySwitchBatchIds(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QuerySwitchBatchIdsRequest(input)
	return out, req.Send()
}

// QuerySwitchBatchIdsWithContext is the same as QuerySwitchBatchIds with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySwitchBatchIds for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kis) QuerySwitchBatchIdsWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QuerySwitchBatchIdsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opQuerySwitchOrderInfos = "QuerySwitchOrderInfos"

// QuerySwitchOrderInfosRequest generates a "ksc/request.Request" representing the
// client's request for the QuerySwitchOrderInfos operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See QuerySwitchOrderInfos for more information on using the QuerySwitchOrderInfos
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the QuerySwitchOrderInfosRequest method.
//    req, resp := client.QuerySwitchOrderInfosRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QuerySwitchOrderInfos
func (c *Kis) QuerySwitchOrderInfosRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opQuerySwitchOrderInfos,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// QuerySwitchOrderInfos API operation for kis.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for kis's
// API operation QuerySwitchOrderInfos for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/kis-2021-08-04/QuerySwitchOrderInfos
func (c *Kis) QuerySwitchOrderInfos(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.QuerySwitchOrderInfosRequest(input)
	return out, req.Send()
}

// QuerySwitchOrderInfosWithContext is the same as QuerySwitchOrderInfos with the addition of
// the ability to pass a context and additional request options.
//
// See QuerySwitchOrderInfos for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Kis) QuerySwitchOrderInfosWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.QuerySwitchOrderInfosRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}
