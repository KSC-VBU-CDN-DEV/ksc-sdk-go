// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package knad

import (
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
)

const opAssociateIp = "AssociateIp"

// AssociateIpRequest generates a "ksc/request.Request" representing the
// client's request for the AssociateIp operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AssociateIp for more information on using the AssociateIp
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the AssociateIpRequest method.
//	req, resp := client.AssociateIpRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/AssociateIp
func (c *Knad) AssociateIpRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAssociateIp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AssociateIp API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation AssociateIp for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/AssociateIp
func (c *Knad) AssociateIp(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AssociateIpRequest(input)
	return out, req.Send()
}

// AssociateIpWithContext is the same as AssociateIp with the addition of
// the ability to pass a context and additional request options.
//
// See AssociateIp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) AssociateIpWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AssociateIpRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateKnad = "CreateKnad"

// CreateKnadRequest generates a "ksc/request.Request" representing the
// client's request for the CreateKnad operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateKnad for more information on using the CreateKnad
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the CreateKnadRequest method.
//	req, resp := client.CreateKnadRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/CreateKnad
func (c *Knad) CreateKnadRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateKnad,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateKnad API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation CreateKnad for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/CreateKnad
func (c *Knad) CreateKnad(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateKnadRequest(input)
	return out, req.Send()
}

// CreateKnadWithContext is the same as CreateKnad with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKnad for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) CreateKnadWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateKnadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteKnad = "DeleteKnad"

// DeleteKnadRequest generates a "ksc/request.Request" representing the
// client's request for the DeleteKnad operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteKnad for more information on using the DeleteKnad
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DeleteKnadRequest method.
//	req, resp := client.DeleteKnadRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DeleteKnad
func (c *Knad) DeleteKnadRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteKnad,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteKnad API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation DeleteKnad for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DeleteKnad
func (c *Knad) DeleteKnad(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteKnadRequest(input)
	return out, req.Send()
}

// DeleteKnadWithContext is the same as DeleteKnad with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteKnad for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) DeleteKnadWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteKnadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeKnad = "DescribeKnad"

// DescribeKnadRequest generates a "ksc/request.Request" representing the
// client's request for the DescribeKnad operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeKnad for more information on using the DescribeKnad
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DescribeKnadRequest method.
//	req, resp := client.DescribeKnadRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DescribeKnad
func (c *Knad) DescribeKnadRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeKnad,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DescribeKnad API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation DescribeKnad for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DescribeKnad
func (c *Knad) DescribeKnad(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeKnadRequest(input)
	return out, req.Send()
}

// DescribeKnadWithContext is the same as DescribeKnad with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeKnad for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) DescribeKnadWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeKnadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDisassociateIp = "DisassociateIp"

// DisassociateIpRequest generates a "ksc/request.Request" representing the
// client's request for the DisassociateIp operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DisassociateIp for more information on using the DisassociateIp
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the DisassociateIpRequest method.
//	req, resp := client.DisassociateIpRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DisassociateIp
func (c *Knad) DisassociateIpRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDisassociateIp,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DisassociateIp API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation DisassociateIp for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/DisassociateIp
func (c *Knad) DisassociateIp(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DisassociateIpRequest(input)
	return out, req.Send()
}

// DisassociateIpWithContext is the same as DisassociateIp with the addition of
// the ability to pass a context and additional request options.
//
// See DisassociateIp for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) DisassociateIpWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DisassociateIpRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opIpList = "KnadIpList"

// IpListRequest generates a "ksc/request.Request" representing the
// client's request for the IpList operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See IpList for more information on using the IpList
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the IpListRequest method.
//	req, resp := client.IpListRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/IpList
func (c *Knad) IpListRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opIpList,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// IpList API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation IpList for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/IpList
func (c *Knad) IpList(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.IpListRequest(input)
	return out, req.Send()
}

// IpListWithContext is the same as IpList with the addition of
// the ability to pass a context and additional request options.
//
// See IpList for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) IpListWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.IpListRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyKnad = "ModifyKnad"

// ModifyKnadRequest generates a "ksc/request.Request" representing the
// client's request for the ModifyKnad operation. The "output" return
// value will be populated with the request's response once the request completes
// successfully.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyKnad for more information on using the ModifyKnad
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//	// Example sending a request using the ModifyKnadRequest method.
//	req, resp := client.ModifyKnadRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/ModifyKnad
func (c *Knad) ModifyKnadRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyKnad,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ModifyKnad API operation for knad.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the KSC API reference guide for knad's
// API operation ModifyKnad for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/knad-2023-03-23/ModifyKnad
func (c *Knad) ModifyKnad(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyKnadRequest(input)
	return out, req.Send()
}

// ModifyKnadWithContext is the same as ModifyKnad with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyKnad for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Knad) ModifyKnadWithContext(ctx aws.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyKnadRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}
